<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta http-equiv="X-UA-Compatible" content="ie=edge" />
    <script defer src="/face-api.min.js"></script>
    <script defer src="/script.js"></script>

    <title>Face Recognition</title>
    <style>
      body {
        margin: 0;
        padding: 0;
        width: 100vw;
        height: 100vh;
        display: flex;
        justify-content: center;
        align-items: center;
        flex-direction: column;
      }

      .size {
        position: absolute;
        top: 0;
        left: 0;
        width: 0;
      } 
      canvas{
        position: absolute;
        top: 0;
        left: 0;
      }
    
      .displayNone
      {
        display: none;
      }

    </style>
  </head>
  <body>
    <!-- <input type="file" id="imageUpload" value="" /> -->
    <div id="loaded"></div>
    <div id="uploadedImage" style="width: 10px"></div>
    <div class="appendInfo"></div>
    

    <div class="contentarea">
      <h1>Using Javascript to capture Photo</h1>
      <div class="camera">
        <video id="video">Video stream not available.</video>
      </div>
      <div><button id="startbutton" class="takePicture">Take photo</button></div>
      <canvas id="canvas" class="size"></canvas>
        <img id="photo" alt="The screen capture will appear in this box." />
      </div>
    </div>

    <form action="/auth" method="POST" >
    <input type="text" name="authenticated" id="authenticated" >
    <input type="text" name="user_id" id="user_id">
    <input type="submit" class="conformUser">
    </form>
    

    <button id="submitted" class="conform">Submit</button>

    <script>
      /* JS comes here */
      (function () {
        var width = 320; // We will scale the photo width to this
        var height = 0; // This will be computed based on the input stream

        var streaming = false;

        var video = null;
        var canvas = null;
        var photo = null;
        var startbutton = null;

        function startup() {
          video = document.getElementById("video");
          canvas = document.getElementById("canvas");
          photo = document.getElementById("photo");
          startbutton = document.getElementById("startbutton");

          navigator.mediaDevices
            .getUserMedia({
              video: true,
              audio: false,
            })
            .then(function (stream) {
              video.srcObject = stream;
              video.play();
            })
            .catch(function (err) {
              console.log("An error occurred: " + err);
            });

          video.addEventListener(
            "canplay",
            function (ev) {
              if (!streaming) {
                height = video.videoHeight / (video.videoWidth / width);

                if (isNaN(height)) {
                  height = width / (4 / 3);
                }

                video.setAttribute("width", width);
                video.setAttribute("height", height);
                canvas.setAttribute("width", width);
                canvas.setAttribute("height", height);
                streaming = true;
              }
            },
            false
          );

          startbutton.addEventListener(
            "click",
            function (ev) {
              takepicture();
              ev.preventDefault();
            },
            false
          );

          clearphoto();
        }

        function clearphoto() {
          var context = canvas.getContext("2d");
          context.fillStyle = "#AAA";
          context.fillRect(0, 0, canvas.width, canvas.height);

          var data = canvas.toDataURL("image/png");
          photo.setAttribute("src", data);
        }

        function takepicture() {
          var context = canvas.getContext("2d");
          if (width && height) {
            canvas.width = width;
            canvas.height = height;
            context.drawImage(video, 0, 0, width, height);

            var data = canvas.toDataURL("image/png");
            photo.setAttribute("src", data);
          } else {
            clearphoto();
          }
        }

        window.addEventListener("load", startup, false);
      })();

////////////////////
//Voice Commands
///////////////////
    </script>
    
  </body>
  <script src="//cdnjs.cloudflare.com/ajax/libs/annyang/2.6.1/annyang.min.js"></script>
  <script src="//cdnjs.cloudflare.com/ajax/libs/SpeechKITT/0.3.0/speechkitt.min.js"></script>
  <script>
    document.querySelector("body").addEventListener("keypress", myKeyPress);

    function myKeyPress(e) {
      var keynum;

      if (window.event) {
        // IE
        keynum = e.keyCode;
      } else if (e.which) {
        // Netscape/Firefox/Opera
        keynum = e.which;
      }

      if (keynum == 102) {
        if (annyang) {
          // Let's define a command.
          const commands = {
            pdf: () => {
              window.open("/pdf", "_self");
            },
            notes: () => {
              window.open("/notes", "_self");
            },
            "take picture": ()=>{
              document.querySelector(".takePicture").click();
              setTimeout(() => {  document.querySelector(".conform").click(); }, 2000);
              setTimeout(() => {  document.querySelector(".conformUser").click(); }, 4000);
            }
          };

          //   Add our commands to annyang
          annyang.addCommands(commands);

          // Start listening.
          annyang.start();
          SpeechKITT.annyang();

          // Define a stylesheet for KITT to use
          SpeechKITT.setStylesheet(
            "//cdnjs.cloudflare.com/ajax/libs/SpeechKITT/0.3.0/themes/flat.css"
          );

          // Render KITT's interface
          SpeechKITT.vroom();
        }
      }
    }
  </script>
</html>
